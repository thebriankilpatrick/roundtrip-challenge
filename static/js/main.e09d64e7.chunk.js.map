{"version":3,"sources":["utils/API.js","App.js","serviceWorker.js","index.js"],"names":["path","axios","get","planObj","post","aliasObj","App","state","carrierAndPlanName","companyId","phoneNumber","unmatchedPlans","closestMatch","filteredMatch","disabled","masterPlanId","aliasIndex","index","componentDidMount","i","Math","floor","random","API","then","res","setState","carrier_name","data","plan_name","company_id","company_phone","id","filterRes","this","filterMasterList","length","handleChange","event","target","name","value","handleMatchEnable","selectedIndex","option","childNodes","getAttribute","createAlias","alias","unmatched_plan_id","master_plan_id","alert","catch","err","createMasterPlan","masterArr","masterplan","max","map","plan","console","log","filter","masterPlan","toLowerCase","includes","className","htmlFor","onChange","match","key","type","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e09d64e7.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// const path = \"http://localhost:5000\";\n// const path = \"https://json-server-green.vercel.app/db.json\";\nconst path = \"https://thawing-island-08492.herokuapp.com\";\n\nexport default {\n\n    getMasterPlans: function() {\n        return axios.get(path + \"/master-plans\");\n    },\n\n    getUnmatchedPlans: function() {\n        return axios.get(path + \"/unmatched-plans\");\n    },\n\n    getMasterPlan: function(planId) {\n        return axios.get(path + \"/master-plans/\" + planId);\n    },\n\n    getUnmatchedPlan: function(planId) {\n        return axios.get(path + \"/unmatched-plans/\" + planId);\n    },\n\n    getAliases: function() {\n        return axios.get(path + \"/aliases\");\n    },\n\n    getAlias: function(aliasId) {\n        return axios.get(path + \"/aliases/\" + aliasId);\n    },\n\n    createMasterPlan: function(planObj) {\n        return axios.post(path + \"/master-plans\", planObj);\n    },\n\n    createAlias: function(aliasObj) {\n        return axios.post(path + \"/aliases\", aliasObj);\n    }\n\n}","import React, { Component } from 'react';\nimport API from \"./utils/API\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    carrierAndPlanName: \"\",\n    companyId: \"\",\n    phoneNumber: \"\",\n    unmatchedPlans: {},\n    closestMatch: [],\n    filteredMatch: [],\n    disabled: true,\n    masterPlanId: \"\",\n    aliasIndex: 0,\n    index: 0\n  }\n\n  componentDidMount = () => {\n\n    // Populating UI with a random Unmatched Plan\n    let i = Math.floor(Math.random() * 4);   \n    API.getUnmatchedPlans().then(res => {\n      this.setState({\n        unmatchedPlans: {\n          carrier_name: res.data[i].carrier_name,\n          plan_name: res.data[i].plan_name,\n          company_id: res.data[i].company_id,\n          company_phone: res.data[i].company_phone,\n          id: res.data[i].id\n        }\n      });\n    });\n\n    // Retrieving all the Master Plans, and then sorting based on the loaded Unmatched Plan\n    API.getMasterPlans().then(res => {\n      this.setState({\n        closestMatch: res.data,\n        filteredMatch: res.data\n      }, function() {\n          const filterRes = this.filterMasterList(this.state.unmatchedPlans.plan_name);\n          this.setState({\n            filteredMatch: filterRes\n          });\n      });\n    });\n\n    // Retrieving Aliases just so I can get next ID value\n    API.getAliases().then(res => {\n      this.setState({\n        aliasIndex: res.data.length + 1\n      });\n    });\n  }\n\n  handleChange = event => {\n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  } \n\n  // Handles the enabling and disabling of the match buttong depending on the Master Plan selection\n  handleMatchEnable = event => {\n    const index = event.target.selectedIndex;\n    const el = event.target.childNodes[index];\n    const option =  el.getAttribute('id');\n\n    const {value} = event.target;\n    if (value === \"Select\") {\n      this.setState({disabled: true})\n    }\n    else {\n    this.setState({\n      disabled: false,\n      masterPlanId: option\n    });\n    }\n  }\n\n  // Creating an Alias when the Match button is clicked\n  createAlias = () => {\n    let alias = {\n      id: this.state.aliasIndex,\n      plan_name: this.state.unmatchedPlans.plan_name,\n      carrier_name: this.state.unmatchedPlans.carrier_name,\n      unmatched_plan_id: this.state.unmatchedPlans.id,\n      master_plan_id: this.state.masterPlanId\n    }\n\n    API.createAlias(alias).then(res => {\n      alert(\"Alias has been created!\");\n    }).catch(err => {\n      alert(\"Alias creation was not successful\");\n      throw err\n    })\n  }\n\n  // Creating a Master Plan when the Create Insurance button is clicked\n  createMasterPlan = () => {\n    let masterArr = this.state.closestMatch;\n    let id = Math.max(...masterArr.map(plan => plan.id)) + 1;\n\n    let masterplan = {\n      id: id,\n      name: this.state.unmatchedPlans.carrier_name + \" \" + this.state.unmatchedPlans.plan_name\n    }\n    console.log(masterplan);\n    API.createMasterPlan(masterplan).then(res => {\n      alert(\"Master Plan has been successfully created\");\n    }).catch(err => {\n      alert(\"Master Plan creation was not successful\");\n      throw err\n    })\n  }\n\n  // This filters the selection of Master Plans based on the loaded Unmatched Plan \n  filterMasterList = (name) => {\n    const results = this.state.closestMatch;\n    const filteredResults = results.filter((plan) => {\n      const masterPlan = plan.name;\n      console.log(masterPlan);\n      return masterPlan.toLowerCase().includes(name.toLowerCase());\n    });\n    return filteredResults;\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <h2 className=\"carrierAndPlanTitle\">{this.state.unmatchedPlans.carrier_name} {this.state.unmatchedPlans.plan_name}</h2>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"carrierAndPlanName\">Carrier and Plan Name</label>\n            <input className=\"form-control\" id=\"carrierAndPlanName\"\n              name=\"carrierAndPlanName\"\n              value={this.state.unmatchedPlans.carrier_name + \" \" + this.state.unmatchedPlans.plan_name}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"companyId\">Company ID</label>\n            <input className=\"form-control\" id=\"companyId\"\n              name=\"companyId\"\n              value={this.state.unmatchedPlans.company_id}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"phoneNumber\">Phone Number</label>\n            <input className=\"form-control\" id=\"phoneNumber\"\n              name=\"phoneNumber\"\n              value={this.state.unmatchedPlans.company_phone}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Closest Match</label>\n            <select onChange={this.handleMatchEnable} className=\"form-control\">\n              <option value=\"Select\">Select</option>\n              {this.state.filteredMatch.map((match, index) => {\n                return (\n                <option value={match.name} key={index} id={match.id}>{match.name}</option>\n                )\n              })}\n            </select>\n          </div>\n          <button type=\"button\" \n            className=\"btn btn-info float-right\"\n            onClick={this.createMasterPlan}\n          >Create Insurance</button>\n          <button type=\"button\"\n            onClick={this.createAlias}\n            className={ this.state.disabled ? \"btn btn-info float-right disabled\" : \"btn btn-info float-right\"}\n          >Match</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}